$date
	Wed Nov 25 19:31:56 2020
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module CPU_harvard_tb $end
$var wire 32 ! register_v0 [31:0] $end
$var wire 32 " instr_readdata [31:0] $end
$var wire 32 # instr_address [31:0] $end
$var wire 32 $ data_writedata [31:0] $end
$var wire 1 % data_write $end
$var wire 32 & data_readdata [31:0] $end
$var wire 1 ' data_read $end
$var wire 32 ( data_address [31:0] $end
$var wire 1 ) active $end
$var reg 1 * clk $end
$var reg 1 + clk_en $end
$var reg 1 , rst $end
$scope module cpuInst $end
$var wire 1 * clk $end
$var wire 1 + clk_enable $end
$var wire 32 - data_address [31:0] $end
$var wire 32 . instr [31:0] $end
$var wire 32 / instr_address [31:0] $end
$var wire 32 0 register_v0 [31:0] $end
$var wire 1 , reset $end
$var wire 32 1 register_source [31:0] $end
$var wire 5 2 register_dest [4:0] $end
$var wire 5 3 register_addr [4:0] $end
$var wire 32 4 pc_increment [31:0] $end
$var wire 32 5 instr_readdata [31:0] $end
$var wire 6 6 instr_opcode [5:0] $end
$var wire 16 7 immediate [15:0] $end
$var wire 32 8 data_readdata [31:0] $end
$var wire 1 ' data_read $end
$var wire 32 9 ALU_sum [31:0] $end
$var reg 1 ) active $end
$var reg 1 % data_write $end
$var reg 32 : data_writedata [31:0] $end
$var reg 32 ; pc [31:0] $end
$var integer 32 < index [31:0] $end
$upscope $end
$scope module ram1Inst $end
$var wire 32 = address [31:0] $end
$var wire 32 > readdata [31:0] $end
$var reg 1024 ? memory [1023:0] $end
$scope begin $unm_blk_16 $end
$var integer 32 @ i [31:0] $end
$upscope $end
$upscope $end
$scope module ram2Inst $end
$var wire 32 A address [31:0] $end
$var wire 1 * clk $end
$var wire 1 ' read_en $end
$var wire 1 % write_en $end
$var wire 32 B writedata [31:0] $end
$var wire 32 C readdata [31:0] $end
$var reg 1024 D memory [1023:0] $end
$scope begin $unm_blk_5 $end
$var integer 32 E i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11111 E
bx
bx C
bx B
bx A
b11111 @
bx00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111110001100001000100000000000000000 ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
0,
0+
0*
0)
bx (
x'
bx &
x%
bx $
bx #
bx "
bx !
$end
#1000
1,
1+
1*
#2000
0*
0+
#3000
b10101010101010100000000000000000 &
b10101010101010100000000000000000 8
b10101010101010100000000000000000 C
1'
b101 (
b101 -
b101 A
b101 9
b101 1
b1 3
b100011 6
b10 2
b0 7
0,
b0 !
b0 0
b1 4
b10001100001000100000000000000000 .
b10001100001000100000000000000000 "
b10001100001000100000000000000000 5
b10001100001000100000000000000000 >
b0 #
b0 /
b0 =
b0 ;
b100000 <
1)
1+
1*
#4000
0*
0+
#5000
0'
bx 1
bx &
bx 8
bx C
b11111 3
b111111 6
b11111 2
bx (
bx -
bx A
bx 9
b1111111111111111 7
b10 4
b11111111111111111111111111111111 .
b11111111111111111111111111111111 "
b11111111111111111111111111111111 5
b11111111111111111111111111111111 >
b1 #
b1 /
b1 =
b1 ;
b10101010101010100000000000000000 !
b10101010101010100000000000000000 0
1+
1*
#6000
0*
0+
#7000
0)
1+
1*
#8000
0*
0+
#9000
1+
1*
